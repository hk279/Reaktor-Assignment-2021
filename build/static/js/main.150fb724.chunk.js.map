{"version":3,"sources":["useWindowDimensions.js","App.js","reportWebVitals.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","Header","Layout","Content","Column","Table","Title","Typography","App","useState","category","setCategory","productData","setProductData","availabilityData","setAvailabilityData","isLoading","setIsLoading","useEffect","getProductData","getAvailabilityData","axios","get","then","res","data","catch","err","console","log","getItemAvailability","id","slicedString","formattedString","forEach","item","toLowerCase","str","DATAPAYLOAD","slice","length","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","expandableConfig","scrollConfig","colorColumn","title","dataIndex","render","color","map","i","className","priceColumn","expandedRowRender","record","price","y","scrollToFirstRowOnChange","theme","mode","defaultSelectedKeys","Item","onClick","level","dataSource","rowKey","pagination","position","loading","expandable","scroll","sorter","a","b","name","localeCompare","defaultFilteredValue","defaultSortOrder","manufacturer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.150fb724.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height,\r\n    };\r\n}\r\n\r\n//A custom hook to get dimensios of the window and handle resizing.\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}\r\n","import \"./App.css\";\nimport axios from \"axios\";\nimport \"antd/dist/antd.css\";\nimport { Layout, Menu, Table, Typography } from \"antd\";\nimport { useState, useEffect } from \"react\";\nimport useWindowDimensions from \"./useWindowDimensions\";\n\nconst { Header, Content } = Layout;\nconst { Column } = Table;\nconst { Title } = Typography;\n\nconst App = () => {\n    const [category, setCategory] = useState(\"gloves\");\n    const [productData, setProductData] = useState([]);\n    const [availabilityData, setAvailabilityData] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    //Fetches new product data when the category tab is changed.\n    useEffect(() => {\n        getProductData(category);\n    }, [category]);\n\n    /* Fetches all data for product availability on component mount and sets it to state. */\n    useEffect(() => {\n        getAvailabilityData();\n    }, []);\n\n    //Gets the product details data for a given category that is shown on the table.\n    const getProductData = (category) => {\n        axios\n            /* .get(\"http://localhost:3001/api/products/\" + category) */\n            .get(\"/api/products/\" + category)\n            .then((res) => setProductData(res.data))\n            .catch((err) => console.log(err));\n    };\n\n    // Gets availability data for all manufacturers.\n    const getAvailabilityData = () => {\n        axios\n            /* .get(\"http://localhost:3001/api/availability\") */\n            .get(\"/api/availability\")\n            .then((res) => {\n                setAvailabilityData(res.data);\n                setIsLoading(false);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    /* Finds availbility data for an item with corresponding id and returns a formatted string. */\n    const getItemAvailability = (id) => {\n        let slicedString;\n        let formattedString;\n\n        availabilityData.forEach((item) => {\n            if (id === item.id.toLowerCase()) {\n                const str = item.DATAPAYLOAD;\n                slicedString = str.slice(50, str.length - 31);\n                if (slicedString === \"INSTOCK\") {\n                    formattedString = \"In stock\";\n                } else if (slicedString === \"LESSTHAN10\") {\n                    formattedString = \"Less than 10\";\n                } else if (slicedString === \"OUTOFSTOCK\") {\n                    formattedString = \"Out of stock\";\n                } else {\n                    formattedString = slicedString;\n                }\n            }\n        });\n\n        return formattedString;\n    };\n\n    const { height, width } = useWindowDimensions();\n    let expandableConfig = {};\n    let scrollConfig = {};\n\n    //Binds color and price columns to variables so they an be toggled off and shown in expanded row when the screen gets small enough.\n    let colorColumn = (\n        <Column\n            title=\"Color\"\n            dataIndex=\"color\"\n            key=\"color\"\n            render={(color) => (\n                <>\n                    {color.map((item, i) => (\n                        <p className=\"color\" key={i}>\n                            {item}\n                        </p>\n                    ))}\n                </>\n            )}\n        ></Column>\n    );\n    let priceColumn = <Column title=\"Price\" dataIndex=\"price\" key=\"price\"></Column>;\n\n    //Color and price moved to the expanded row when screen width is less than 700px\n    if (width < 700) {\n        colorColumn = null;\n        priceColumn = null;\n        expandableConfig = {\n            expandedRowRender: (record) => (\n                <div className=\"expandedRow\">\n                    <p className=\"expandedRowCell\">\n                        <b>Color:</b>\n                    </p>\n                    <p className=\"expandedRowCell\">{record.color}</p>\n                    <p className=\"expandedRowCell\">\n                        <b>Price:</b>\n                    </p>\n                    <p className=\"expandedRowCell\">{record.price}</p>\n                </div>\n            ),\n        };\n    }\n\n    //Adjusting the scrollable area according to the screen size.\n    if (height < 500) {\n        scrollConfig = { y: 200, scrollToFirstRowOnChange: true };\n    } else if (height < 600) {\n        scrollConfig = { y: 300, scrollToFirstRowOnChange: true };\n    } else if (height < 700) {\n        scrollConfig = { y: 350, scrollToFirstRowOnChange: true };\n    } else if (height < 800) {\n        scrollConfig = { y: 400, scrollToFirstRowOnChange: true };\n    } else if (height < 900) {\n        scrollConfig = { y: 450, scrollToFirstRowOnChange: true };\n    } else if (height < 1000) {\n        scrollConfig = { y: 500, scrollToFirstRowOnChange: true };\n    }\n\n    return (\n        <Layout>\n            <Header>\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\n                    <Menu.Item key=\"1\" onClick={() => setCategory(\"gloves\")}>\n                        Gloves\n                    </Menu.Item>\n                    <Menu.Item key=\"2\" onClick={() => setCategory(\"facemasks\")}>\n                        Facemasks\n                    </Menu.Item>\n                    <Menu.Item key=\"3\" onClick={() => setCategory(\"beanies\")}>\n                        Beanies\n                    </Menu.Item>\n                </Menu>\n            </Header>\n            <Title className=\"info\" level={4}>\n                Availability is refreshed every 5 minutes. Refresh the page for latest data.\n            </Title>\n            <Content className=\"content\">\n                <Table\n                    dataSource={productData}\n                    rowKey=\"id\"\n                    pagination={{ position: [\"bottomCenter\"] }}\n                    loading={isLoading}\n                    expandable={expandableConfig}\n                    scroll={scrollConfig}\n                >\n                    <Column title=\"ID\" dataIndex=\"id\" key=\"id\"></Column>\n                    <Column\n                        title=\"Name\"\n                        dataIndex=\"name\"\n                        key=\"name\"\n                        sorter={(a, b) => a.name.localeCompare(b.name)}\n                        defaultFilteredValue={true}\n                        defaultSortOrder=\"ascend\"\n                    ></Column>\n                    <Column\n                        title=\"Manufacturer\"\n                        dataIndex=\"manufacturer\"\n                        key=\"manufacturer\"\n                        sorter={(a, b) => a.manufacturer.localeCompare(b.manufacturer)}\n                    ></Column>\n                    <Column\n                        title=\"Availability\"\n                        key=\"availability\"\n                        render={(record) => <p className=\"availability\">{getItemAvailability(record.id)}</p>}\n                    ></Column>\n                    {colorColumn}\n                    {priceColumn}\n                </Table>\n            </Content>\n        </Layout>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}